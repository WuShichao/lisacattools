
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples_ucb/plot_time_evolving_parameters.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_ucb_plot_time_evolving_parameters.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_ucb_plot_time_evolving_parameters.py:


Connecting catalogs
===================

Locate a source in an updated catalog and compare parameters.

.. GENERATED FROM PYTHON SOURCE LINES 9-12

This example shows how to find a particular source after the catalog has been updated
based on the `parent` meta data, and produces a corner plot showing how the parameter
estimation evolves with time.

.. GENERATED FROM PYTHON SOURCE LINES 12-18

.. code-block:: default


    import pandas as pd
    import numpy as np
    from chainconsumer import ChainConsumer
    from lisacattools.catalog import GWCatalog, GWCatalogs, GWCatalogType








.. GENERATED FROM PYTHON SOURCE LINES 19-20

Start by loading the 03 month catalog and selecting a source to follow

.. GENERATED FROM PYTHON SOURCE LINES 20-41

.. code-block:: default

    catPath = "../../tutorial/data/ucb"
    catName = "cat7864320_v3.h5"

    meta_catalog = GWCatalogs.create(GWCatalogType.UCB, catPath, catName)
    parent_catalog = meta_catalog.get_last_catalog()

    detections_attr = parent_catalog.get_attr_detections()
    parent_detections = parent_catalog.get_detections(detections_attr)

    # pick a source, any source
    parent_source = "LDC0027827268"

    # use get_attr_source_sample() to return list
    # of all parameters in samples dataframe
    sample_attr = parent_catalog.get_attr_source_sample(parent_source)

    #load full set of parameters
    parent_samples = parent_catalog.get_source_sample(parent_source, sample_attr)

    parent_detections.loc[[parent_source], ["SNR", "Frequency", "Amplitude"]]





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    INFO:numexpr.utils:NumExpr defaulting to 4 threads.


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>SNR</th>
          <th>Frequency</th>
          <th>Amplitude</th>
        </tr>
        <tr>
          <th>name</th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>LDC0027827268</th>
          <td>69.6613</td>
          <td>0.002783</td>
          <td>2.514195e-22</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 42-43

Load the 06 month catalog and find the current name for `parent_source`

.. GENERATED FROM PYTHON SOURCE LINES 43-59

.. code-block:: default

    catName = "cat15728640_v2.h5"

    meta_catalog = GWCatalogs.create(GWCatalogType.UCB, catPath, catName)
    child_catalog = meta_catalog.get_last_catalog()

    child_detections = child_catalog.get_detections(detections_attr)

    # select source that lists parent_source as parent
    child_detections = child_detections[(child_detections["parent"] == parent_source)]
    child_source = child_detections.index.values[0]

    # load parameters of child source in new catalog
    child_samples = child_catalog.get_source_sample(child_source, sample_attr)

    child_detections.loc[[child_source], ["parent", "SNR", "Frequency", "Amplitude"]]






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>parent</th>
          <th>SNR</th>
          <th>Frequency</th>
          <th>Amplitude</th>
        </tr>
        <tr>
          <th>name</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>LDC0027827155</th>
          <td>LDC0027827268</td>
          <td>101.446</td>
          <td>0.002783</td>
          <td>2.147934e-22</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 60-61

Plot the posteriors for the 03 and 06 months inferences for the source

.. GENERATED FROM PYTHON SOURCE LINES 61-103

.. code-block:: default


    c = ChainConsumer()

    # Select which parameters to plot & format the axes labels
    parameters = [
        "Frequency",
        "Amplitude",
        "Ecliptic Longitude",
        "Ecliptic Latitude",
        "Inclination",
    ]
    parameter_labels = [
        r"$f_0\ [{\rm Hz}]$",
        r"$\mathcal{A}$",
        r"$\phi\ [{\rm rad}]$",
        r"$\theta\ [{\rm rad}]$",
        r"$\iota\ [{\rm rad}]$",
    ]


    # add chains
    c.add_chain(
        parent_samples[parameters].values,
        parameters=parameter_labels,
        cloud=True,
        name=parent_source,
    )
    c.add_chain(
        child_samples[parameters].values,
        parameters=parameter_labels,
        cloud=True,
        name=child_source,
    )

    # plot!
    c.configure(
        sigmas=[1, 2, 3],
        linestyles=["-", "--"],
        legend_color_text=False,
        legend_kwargs={"fontsize": 18},
    )
    fig = c.plotter.plot(figsize=1.5)



.. image:: /examples_ucb/images/sphx_glr_plot_time_evolving_parameters_001.png
    :alt: plot time evolving parameters
    :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  7.514 seconds)


.. _sphx_glr_download_examples_ucb_plot_time_evolving_parameters.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_time_evolving_parameters.py <plot_time_evolving_parameters.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_time_evolving_parameters.ipynb <plot_time_evolving_parameters.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
